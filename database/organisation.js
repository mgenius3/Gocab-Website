const fs = require("fs");
const firebaseConfig = require("../configdb/db");
const { initializeApp } = require("firebase/app");

require("firebase/database");
const { getDatabase, ref, push, set, get } = require("firebase/database");
const { getAuth } = require("firebase/auth");

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const auth = getAuth(app);

const RegisterOrganisation = async (data) => {
  try {
    const userData = {
      name: data.name,
      phone: data.phone,
      address: data.address,
      email: data.email,
      model_service: data.model_service,
      business_document_url: data.business_document_url,
      bus_reg_no: data.bus_reg_no,
      status: "on review",
    };

    // Use the 'push' method to generate a unique key
    const newOrgRef = push(ref(db, "organisation"));
    // Get the unique key generated by 'push'
    const newOrgKey = newOrgRef.key;
    // Create a reference to the new child location with the unique key
    const dbRef = ref(db, "organisation/" + newOrgKey);

    // Set the data at the new child location
    await set(dbRef, userData);

    console.log("Organization data stored successfully with ID:", newOrgKey);
  } catch (error) {
    if (error.code === "auth/email-already-in-use") {
      throw new Error(
        "Email address is already in use. Please use a different email."
      );
    } else if (error.code === "auth/network-request-failed") {
      throw new Error("No internet connection");
    } else {
      throw new Error("Error storing data in Firebase: " + error.message);
    }
  }
};

const getAllOrganisation = async () => {
  try {
    const dbRef = ref(db, "organisation");
    const snapshot = await get(dbRef);

    if (snapshot.exists()) {
      const driversData = snapshot.val();
      const driversArray = [];

      // Convert the drivers' data into an array
      for (const orgId in driversData) {
        if (driversData.hasOwnProperty(orgId)) {
          driversArray.push({
            uid: orgId,
            ...driversData[orgId],
          });
        }
      }

      return driversArray;
    } else {
      throw new Error("data not found in the database.");
    }
  } catch (error) {
    throw new Error("Error fetching ' data: " + error.message);
  }
};

const getApprovedOrganisations = async () => {
  try {
    const allOrganisations = await getAllOrganisation();
    const approvedOrganisations = allOrganisations.filter(
      (organisation) => organisation.status === "approved"
    );
    return approvedOrganisations;
  } catch (error) {
    throw new Error("Error fetching approved organisations: " + error.message);
  }
};

module.exports = {
  RegisterOrganisation,
  getApprovedOrganisations,
  getAllOrganisation,
};
